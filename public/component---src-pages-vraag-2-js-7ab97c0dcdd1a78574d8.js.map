{"version":3,"file":"component---src-pages-vraag-2-js-7ab97c0dcdd1a78574d8.js","mappings":"wOAAA,EAAe,IAA0B,6D,UC0IzC,MAnImB,KACf,MAAMA,GAAgBC,EAAAA,EAAAA,QAAO,MACvBC,GAAWD,EAAAA,EAAAA,QAAO,MAClBE,GAAaF,EAAAA,EAAAA,QAAO,MACpBG,GAAaH,EAAAA,EAAAA,QAAO,MACpBI,GAAeJ,EAAAA,EAAAA,QAAO,OAEtB,EAACK,EAAQ,EAACC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,EAACC,EAAQ,EAACC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,EAACG,EAAU,EAACC,IAAgBJ,EAAAA,EAAAA,WAAS,IACrC,EAACK,EAAc,EAACC,IAAoBN,EAAAA,EAAAA,WAAS,IAC7C,EAACO,EAAc,EAACC,IAAoBR,EAAAA,EAAAA,WAAS,GAE7CS,EAAW,YAYjBC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAcC,EAAAA,EAAaC,IAAI,eAChCF,GAA+B,aAAhBA,IACZA,GACAG,EAAAA,EAAAA,IAASH,IAETG,EAAAA,EAAAA,IAAS,KAEjB,GACD,IAuEH,OACI,gCACI,gBAACC,EAAA,EAAM,CACHC,SA7FE,kEA8FFC,QAzFC,gBA0FDC,UAzFG,uCA0FHxB,SAAUA,EACVyB,aA5ES,KACjB,MAAMC,EAAc1B,EAAS2B,QAAQC,cAAcC,SAASC,KAAKC,UACjEjC,EAAc6B,QAAQI,UAAY,GAClCjC,EAAc6B,QAAQK,mBAAmB,YAAaN,GACtD,MAAMO,EAAWP,EAAYQ,SAAS,SAAWR,EAAYQ,SAAS,SAChEC,GAAW,OAAIrC,EAAc6B,QAAQS,UAAUC,KAAIC,GAASA,EAAMC,UAASL,SAAS,KACpFM,EAAad,EAAYQ,SAAS,kBAE7B7B,IAAX4B,GACWzB,IAAX2B,GACazB,IAAb8B,GACIP,GAAYE,GAAYK,GACxB5B,GAAiB,GACjBE,GAAiB,GACjBI,EAAAA,EAAauB,IAAI,cAAe1B,GAChC2B,YAAW,KACP5B,GAAiB,EAAM,GACxB,OAEHF,GAAiB,GACjBE,GAAiB,GACrB,EAwDQ6B,YAtDQ,IACT,KAsDCC,WApDO,IACR,KAoDCC,kBAAmB,QACnBC,oBAAqB,mBACrBC,iBAAkB,gBAClBC,gBAAiB,QACjBC,YArDQ,IAChB,gCACI,yBAAG,yJAAyJ,2BAC5J,yBAAG,kHACH,uBAAKC,IAAKC,EAAMC,IAAI,mBACpB,0BACI,0BAAI,mBAAgB,4BAAM,QAC1B,0BAAI,aAAU,4BAAM,kBAAqB,UACzC,0BAAI,uBAAoB,4BAAM,SAC9B,0BAAI,kMAER,yBAAG,0IA2CCC,WAvCO,IACf,gCACI,uBAAKC,UAAU,QACX,yBAAOC,KAAK,WAAWC,UAAU,EAAMC,IAAKxD,EAAYyD,QAAStD,IACjE,yBAAG,YAAS,4BAAM,QAAiB,2BAAwB,4BAAM,UAAmB,oCAExF,uBAAKkD,UAAU,QACX,yBAAOC,KAAK,WAAWC,UAAU,EAAMC,IAAKvD,EAAYwD,QAASnD,IACjE,yBAAG,qBAAkB,4BAAM,QAAiB,mCAEhD,gBAACoD,EAAA,EAAM,CACHJ,KAAM,aACNK,SAAS,MACTC,UAAU,EACVC,MAAO,6HAEX,uBAAKR,UAAU,QACX,yBAAOC,KAAK,WAAWC,UAAU,EAAMC,IAAKtD,EAAcuD,QAASjD,IACnE,yBAAG,6CAA0C,4BAAM,OAAgB,qCAEvE,yBAAG,yIAoBCsD,eA3GW,CAAC,OAAQ,OA4GpBpD,cAAeA,EACfE,cAAeA,EACfE,SAAUA,IAEd,uBAAK0C,IAAK3D,EAAekE,GAAG,eAC7B,EAMJ,MAAMC,EAAO,IAAM,6BAAO,U","sources":["webpack://javascript/./src/helpers/images/html-explained.png","webpack://javascript/./src/pages/vraag-2.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/html-explained-debb5cf583ed08b85a1c35c60e4e2996.png\";","import React, { useState, useRef, useEffect } from \"react\";\nimport { navigate } from \"gatsby\";\nimport Layout from \"../helpers/Layout\";\nimport Editor from '../components/Editor/Editor';\nimport img1 from \"./../helpers/images/html-explained.png\";\nimport LocalStorage from \"./../helpers/LocalStorage\";\n\nconst Vraag2Page = () => {    \n    const virtualDomRef = useRef(null);\n    const frameRef = useRef(null);\n    const stepOneRef = useRef(null);\n    const stepTwoRef = useRef(null);\n    const stepThreeRef = useRef(null);\n\n    const [stepOne, setStepOne] = useState(false);\n    const [stepTwo, setStepTwo] = useState(false);\n    const [stepThree, setStepThree] = useState(false);\n    const [stepsComplete, setStepsComplete] = useState(false);\n    const [successScreen, setSuccessScreen] = useState(false);\n\n    const nextPage = \"/vraag-3\"; \n    const allowedEditors = ['html', 'css'];\n    const cssState = `/* CSS */\n.copied {\n    color: blue;\n    font-size: 12px;\n}`;\n    const jsState = `// JavaScript`;\n    const htmlState = `<!-- HTML -->\n<body>\n</body>`;\n\n    useEffect(() => {\n        const currentPage = LocalStorage.get('currentPage');\n        if (!currentPage || currentPage !== '/vraag-2') {\n            if (currentPage) {\n                navigate(currentPage);\n            } else {\n                navigate('/');\n            }\n        }\n    }, []);\n\n    const validateHTML = () => {\n        const codeToCheck = frameRef.current.contentWindow.document.body.innerHTML;\n        virtualDomRef.current.innerHTML = '';\n        virtualDomRef.current.insertAdjacentHTML('beforeend', codeToCheck);\n        const checkOne = codeToCheck.includes('<h1>') && codeToCheck.includes('</h1>');\n        const checkTwo = [...virtualDomRef.current.children].map(child => child.tagName).includes('P');\n        const checkThree = codeToCheck.includes('class=\"copied\"');\n        // Here we validate the output of the iframe\n        checkOne ? setStepOne(true) : setStepOne(false);\n        checkTwo ? setStepTwo(true) : setStepTwo(false);\n        checkThree ? setStepThree(true) : setStepThree(false);\n        if (checkOne && checkTwo && checkThree) {\n            setStepsComplete(true);\n            setSuccessScreen(true);\n            LocalStorage.set('currentPage', nextPage);\n            setTimeout(() => {\n                setSuccessScreen(false);\n            }, 2000);\n        } else {\n            setStepsComplete(false);\n            setSuccessScreen(false);\n        }\n    }\n    const validateCSS = () => {\n        return null;\n    }\n    const validateJS = () => {\n        return null;\n    }\n\n    const explanation = () => (\n        <>\n            <p>HTML is opgebouwd uit elementen. Deze elementen structureren de webpagina en definiëren de inhoud ervan. Laten we eens kijken hoe ze zijn geschreven.</p><br />\n            <p>Het diagram hieronder toont een HTML-paragraafelement. Zoals we kunnen zien, bestaat het paragraafelement uit:</p>\n            <img src={img1} alt=\"HTML explained\" />\n            <ul>\n                <li>Een openingstag <code>&lt;p&gt;</code></li>\n                <li>De inhoud <code>“Hello World!”</code> tekst</li>\n                <li>Een afsluitende tag <code>&lt;/p&gt;</code></li>\n                <li>Een tag en de inhoud daartussen wordt een HTML-element genoemd. Er zijn veel tags die we kunnen gebruiken om tekst en andere soorten inhoud, zoals afbeeldingen, te ordenen en weer te geven.</li>\n            </ul>\n            <p>Een HTML element kan ook één of meerdere attributen hebben. Deze attributen hebben dan elk weer een waarde. Maar hierover later meer.</p>\n        </> \n    )\n\n    const assignment = () => (\n        <>\n            <div className=\"step\">\n                <input type=\"checkbox\" disabled={true} ref={stepOneRef} checked={stepOne} />\n                <p>Voeg een <code>&lt;h1&gt;</code> element toe binnen het <code>&lt;body&gt;</code> element. Zet hierin jouw naam.</p>\n            </div>\n            <div className=\"step\">\n                <input type=\"checkbox\" disabled={true} ref={stepTwoRef} checked={stepTwo} />\n                <p>Voeg nu onder het <code>&lt;h1&gt;</code> element de volgende code toe:</p>\n            </div>\n            <Editor\n                type={'assignment'}\n                language=\"xml\"\n                readOnly={true}\n                value={'<p>\"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\"</p>'}\n            />\n            <div className=\"step\">\n                <input type=\"checkbox\" disabled={true} ref={stepThreeRef} checked={stepThree} />\n                <p>Voeg nu een attribute \"class\" toe aan het <code>&lt;p&gt;</code> element met de waarde: \"copied\"</p>\n            </div>\n            <p>Je ziet dat door het toevoegen van een class attribute het uiterlijk van de tekst veranderd. Dit komt door CSS. Hierover later meer.</p>\n        </>\n    )\n\n    return (\n        <>\n            <Layout\n                cssState={cssState}\n                jsState={jsState}\n                htmlState={htmlState}\n                frameRef={frameRef}\n                validateHTML={validateHTML}\n                validateCSS={validateCSS}\n                validateJS={validateJS}\n                explanationTopBar={\"Leren\"}\n                explanationSubtitle={\"Introductie HTML\"}\n                explanationTitle={\"HTML Anatomie\"}\n                explanationTime={\"5 min\"}\n                explanation={explanation}\n                assignment={assignment}\n                allowedEditors={allowedEditors}\n                stepsComplete={stepsComplete}\n                successScreen={successScreen}\n                nextPage={nextPage}\n            />\n            <div ref={virtualDomRef} id=\"virtualDom\" />\n        </>\n  )\n}\n\nexport default Vraag2Page\n\nexport const Head = () => <title>Vraag 2</title>\n"],"names":["virtualDomRef","useRef","frameRef","stepOneRef","stepTwoRef","stepThreeRef","stepOne","setStepOne","useState","stepTwo","setStepTwo","stepThree","setStepThree","stepsComplete","setStepsComplete","successScreen","setSuccessScreen","nextPage","useEffect","currentPage","LocalStorage","get","navigate","Layout","cssState","jsState","htmlState","validateHTML","codeToCheck","current","contentWindow","document","body","innerHTML","insertAdjacentHTML","checkOne","includes","checkTwo","children","map","child","tagName","checkThree","set","setTimeout","validateCSS","validateJS","explanationTopBar","explanationSubtitle","explanationTitle","explanationTime","explanation","src","img1","alt","assignment","className","type","disabled","ref","checked","Editor","language","readOnly","value","allowedEditors","id","Head"],"sourceRoot":""}