{"version":3,"file":"component---src-pages-vraag-6-js-5780ecbe50d3f9e8bee8.js","mappings":"mMA4GA,UAvGmB,KACf,MAAMA,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAaD,EAAAA,EAAAA,QAAO,MACpBE,GAAaF,EAAAA,EAAAA,QAAO,OAEpB,EAACG,EAAQ,EAACC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,EAACC,EAAQ,EAACC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,EAACG,EAAc,EAACC,IAAoBJ,EAAAA,EAAAA,WAAS,IAC7C,EAACK,EAAc,EAACC,IAAoBN,EAAAA,EAAAA,WAAS,GAE7CO,EAAW,WAMjB,IAAIC,GAAW,EACXC,GAAW,EAEf,MAAMC,EAAW,KACb,MAAMC,EAAcjB,EAASkB,QAAQC,cAAcC,SAASC,KAAKC,UACjER,IAAWG,EAAYM,SAAS,QAChC,MAAMC,EAAaxB,EAASkB,QAAQC,cAAcC,SAASK,qBAAqB,SAAS,GAAGH,UACtFI,EAAcF,EAAWD,SAAS,QAClCI,EAAcH,EAAWD,SAAS,UAClCK,EAAgBJ,EAAWD,SAAS,cAC1CR,EAAYW,GAAeC,GAAeC,EAG/BvB,IAAXS,GACWN,IAAXO,GACID,GAAYC,GACZL,GAAiB,GACjBE,GAAiB,GACjBiB,EAAAA,EAAaC,IAAI,cAAejB,GAChCkB,YAAW,KACPnB,GAAiB,EAAM,GACxB,OAEHF,GAAiB,GACjBE,GAAiB,GACrB,EAqCJ,OACI,gCACI,gBAAC,IAAM,CACHoB,SArEE,YAsEFC,QArEC,gBAsEDC,UArEG,sBAsEHlC,SAAUA,EACVmC,aAAcnB,EACdoB,YAAapB,EACbqB,WAAYrB,EACZsB,kBAAmB,QACnBC,oBAAqB,kBACrBC,iBAAkB,cAClBC,gBAAiB,QACjBC,YAhDQ,IAChB,gCACI,yBAAG,6VAA6V,2BAAM,2BACtW,0BAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAI,gEAAgEC,MAAM,uBAAuBC,YAAY,IAAIC,MAAM,sGAAsGC,eAAe,kCAAkCC,iBAAe,IAAU,2BAAM,2BAAM,2BACpV,yBAAG,iLAA8K,4BAAM,WAAoB,eAAY,4BAAM,UAAmB,iHAAiH,2BACjW,gBAAC,IAAM,CACHC,KAAM,aACNC,SAAS,MACTC,UAAU,EACVC,cAAc,EACdC,MAAK,oDAIP,2BACF,yBAAG,4CAAyC,4BAAM,QAAiB,iGAA8F,4BAAM,QAAiB,kFAAkF,2BAC1Q,yBAAG,uGAiCCC,WA7BO,IACf,gCACI,uBAAKC,UAAU,QACX,yBAAON,KAAK,WAAWO,UAAU,EAAMC,IAAKzD,EAAY0D,QAASxD,IACjE,yBAAG,cAAW,4BAAM,QAAiB,6BAEzC,uBAAKqD,UAAU,QACX,yBAAON,KAAK,WAAWO,UAAU,EAAMC,IAAKxD,EAAYyD,QAASrD,IACjE,yBAAG,oGAEP,yBAAG,+EAoBCsD,eAnFW,CAAC,OAAQ,OAoFpBpD,cAAeA,EACfE,cAAeA,EACfE,SAAUA,IAEf,EAMJ,MAAMiD,EAAO,IAAM,6BAAO,U","sources":["webpack://javascript/./src/pages/vraag-6.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Layout from \"../helpers/Layout\";\nimport Editor from '../components/Editor/Editor';\nimport LocalStorage from \"../helpers/LocalStorage\";\n\nconst Vraag6Page = () => {\n    const frameRef = useRef(null);\n    const stepOneRef = useRef(null);\n    const stepTwoRef = useRef(null);\n\n    const [stepOne, setStepOne] = useState(false);\n    const [stepTwo, setStepTwo] = useState(false);\n    const [stepsComplete, setStepsComplete] = useState(false);\n    const [successScreen, setSuccessScreen] = useState(false);\n\n    const nextPage = \"/vraag-7\"; \n    const allowedEditors = ['html', 'css'];\n    const cssState = `/* CSS */`;\n    const jsState = `// JavaScript`;\n    const htmlState = `<!-- HTML -->`;\n\n    let checkOne = false;\n    let checkTwo = false;\n\n    const validate = () => {\n        const codeToCheck = frameRef.current.contentWindow.document.body.innerHTML;\n        checkOne = codeToCheck.includes('<h1>') ? true : false;\n        const CSSToCheck = frameRef.current.contentWindow.document.getElementsByTagName('style')[0].innerHTML;\n        const checkTwoOne = CSSToCheck.includes('h1 {');\n        const checkTwoTwo = CSSToCheck.includes('color:');\n        const checkTwoThree = CSSToCheck.includes('font-size:');\n        checkTwo = (checkTwoOne && checkTwoTwo && checkTwoThree);\n\n        // Here we validate the output of the iframe\n        checkOne ? setStepOne(true) : setStepOne(false);\n        checkTwo ? setStepTwo(true) : setStepTwo(false);\n        if (checkOne && checkTwo) {\n            setStepsComplete(true);\n            setSuccessScreen(true);\n            LocalStorage.set('currentPage', nextPage);\n            setTimeout(() => {\n                setSuccessScreen(false);\n            }, 2000);\n        } else {\n            setStepsComplete(false);\n            setSuccessScreen(false);\n        }\n    }\n\n    const explanation = () => (\n        <>\n            <p>CSS staat voor Cascading Style Sheets. Het is een opmaaktaal die wordt gebruikt om de presentatie en het uiterlijk van een HTML-document te definiëren. Met CSS kunnen ontwikkelaars verschillende stijlen, zoals kleuren, lettertypen, marges, enzovoort, toepassen op HTML-elementen. Bekijk de video hieronder voor een gedetaileerde uitleg over CSS.</p><br /><br />\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wRNinF7YQqQ?si=1AN2mvrM3puEGUWj\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe><br /><br /><br />\n            <p>CSS werkt door stijlregels toe te passen op specifieke HTML-elementen. Deze stijlregels worden gedefinieerd in een apart CSS-bestand of binnen het HTML-document zelf, tussen <code>&lt;style&gt;</code> tags in de <code>&lt;head&gt;</code> sectie. Elke stijlregel bestaat uit een selector en een set stijlregels die de gewenste opmaak specificeren:</p><br />\n            <Editor\n                type={'assignment'}\n                language=\"css\"\n                readOnly={true}\n                lineWrapping={true}\n                value={`h1 {\n    color: blue;\n    font-size: 24px;\n}`}\n            /><br />\n            <p>In deze regel is h1 de selector die alle <code>&lt;h1&gt;</code> elementen in het HTML-document target. De stijlregels binnen de accolades geven aan dat alle <code>&lt;h1&gt;</code> elementen blauwe tekstkleur en een lettergrootte van 24 pixels moeten hebben.</p><br />\n            <p>We hebben boven de index.html nu ook een styles.css tabje toegevoegd. Hierin kun je CSS toevoegen.</p>\n        </> \n    )\n\n    const assignment = () => (\n        <>\n            <div className=\"step\">\n                <input type=\"checkbox\" disabled={true} ref={stepOneRef} checked={stepOne} />\n                <p>Creëer een <code>&lt;h1&gt;</code>-element met een waarde.</p>\n            </div>\n            <div className=\"step\">\n                <input type=\"checkbox\" disabled={true} ref={stepTwoRef} checked={stepTwo} />\n                <p>Voeg in het styles.css tabje styling toe om de h1 een kleur te geven, en een lettertype grootte</p>\n            </div>\n            <p>Voeg meerdere h1 elementen toe met andere tekst om te zien wat er gebeurt.</p>\n        </>\n    )\n\n    return (\n        <>\n            <Layout\n                cssState={cssState}\n                jsState={jsState}\n                htmlState={htmlState}\n                frameRef={frameRef}\n                validateHTML={validate}\n                validateCSS={validate}\n                validateJS={validate}\n                explanationTopBar={\"Leren\"}\n                explanationSubtitle={\"Introductie CSS\"}\n                explanationTitle={\"Wat is CSS?\"}\n                explanationTime={\"4 min\"}\n                explanation={explanation}\n                assignment={assignment}\n                allowedEditors={allowedEditors}\n                stepsComplete={stepsComplete}\n                successScreen={successScreen}\n                nextPage={nextPage}\n            />\n        </>\n  )\n}\n\nexport default Vraag6Page\n\nexport const Head = () => <title>Vraag 6</title>\n"],"names":["frameRef","useRef","stepOneRef","stepTwoRef","stepOne","setStepOne","useState","stepTwo","setStepTwo","stepsComplete","setStepsComplete","successScreen","setSuccessScreen","nextPage","checkOne","checkTwo","validate","codeToCheck","current","contentWindow","document","body","innerHTML","includes","CSSToCheck","getElementsByTagName","checkTwoOne","checkTwoTwo","checkTwoThree","LocalStorage","set","setTimeout","cssState","jsState","htmlState","validateHTML","validateCSS","validateJS","explanationTopBar","explanationSubtitle","explanationTitle","explanationTime","explanation","width","height","src","title","frameborder","allow","referrerpolicy","allowfullscreen","type","language","readOnly","lineWrapping","value","assignment","className","disabled","ref","checked","allowedEditors","Head"],"sourceRoot":""}